{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\Medatu\\\\Medatu-website\\\\src\\\\components\\\\WebSite\\\\Pages\\\\DynamicComponents\\\\SearchBar\\\\app\\\\Search.js\";\nimport React from 'react';\nimport './Placesapi.css';\nimport DoctorSearch from './DoctorSearch';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurrentLocation = data => {\n      this.currentLocation = data;\n      this.setState({\n        address: data.address_components[0].long_name\n      });\n    };\n\n    this.getApproxAddress = async (lat, long) => {\n      return await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&result_type=street_address|political|locality|sublocality|neighborhood|premise|subpremise&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s&libraries=places`).then(response => response.json()).then(async data => {\n        console.log('Map Response: ', data);\n\n        if (data.status === 'OK' && data.results.length > 0) {\n          this.setCurrentLocation(data.results[0]);\n        }\n\n        return null;\n      });\n    };\n\n    this.getNearbyPlaces = async () => {\n      this.setState({\n        isChanged: false\n      });\n      const {\n        latitude,\n        longitude\n      } = this.state;\n      console.log(latitude, longitude);\n      const URL = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${latitude},${longitude}&type=bus_station|post_office|tourist_attraction|train_station|hospital&radius=${5000 * 1000}&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s`;\n      axios.get(URL).then(response => {\n        console.log(response.data.results);\n        this.formatSuggestions(response.data.results);\n      }).catch(error => {\n        console.log(error.message);\n      });\n    };\n\n    this.formatSuggestions = results => {\n      const formattedResults = results.map(function (k) {\n        return {\n          description: k.name,\n          id: k.place_id,\n          types: [\"locality\", \"political\", \"geocode\"],\n          formattedSuggestion: {\n            mainText: k.name,\n            secondaryText: k.vicinity\n          }\n        };\n      });\n      console.log('formattedResults', formattedResults);\n      this.setState({\n        initialSuggestions: formattedResults\n      });\n    };\n\n    this.handleChange = address => {\n      this.setState({\n        isChanged: true\n      });\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n    };\n\n    this.fetchSuggestions = () => {\n      console.log('fetching suggestions');\n      this.getNearbyPlaces();\n    };\n\n    this.state = {\n      address: '',\n      currentLocation: null,\n      initialSuggestions: [],\n      latitude: null,\n      longitude: null,\n      isChanged: false\n    };\n  }\n\n  componentDidMount() {\n    this.getGeoLocation();\n\n    let _this = this;\n\n    document.addEventListener('click', function (e) {\n      console.log('e', e.target.className);\n\n      if (!e.target.className.includes('location-search-input')) {\n        _this.setState({\n          isChanged: true\n        });\n      }\n    }, false);\n  }\n\n  getGeoLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(({\n        coords\n      }) => {\n        const {\n          latitude,\n          longitude\n        } = coords;\n        console.log('latlong', latitude, longitude);\n        this.setState({\n          latitude: latitude,\n          longitude: longitude\n        });\n        this.currentLocation = this.getApproxAddress(latitude, longitude);\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => {\n        console.log('suggesstions', suggestions);\n        const iterableSuggestion = this.state.isChanged ? suggestions : this.state.initialSuggestions;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-box\",\n            style: {\n              padding: \"0\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"form-design\",\n              action: \"assets/webpages/list.html\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"search-location\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  style: {\n                    borderBottomLeftRadius: 20,\n                    borderTopLeftRadius: 20,\n                    borderColor: \"#a49d9d !important\"\n                  },\n                  ...getInputProps({\n                    placeholder: 'Search Places ...',\n                    className: 'location-search-input'\n                  }),\n                  type: \"text\",\n                  id: \"location\",\n                  placeholder: \"Search Location\",\n                  onFocus: this.fetchSuggestions\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"autocomplete-dropdown-container\",\n                  children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: \"Loading...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 31\n                  }, this), iterableSuggestion.map(suggestion => {\n                    const style = suggestion.active ? {\n                      backgroundColor: 'rgba(238, 238, 232)',\n                      padding: \".5rem\"\n                    } : {\n                      backgroundColor: '#fdfdfd',\n                      padding: \".5rem\"\n                    };\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"input-suggestionz\",\n                      ...getSuggestionItemProps(suggestion, {\n                        style\n                      }),\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          cursor: 'pointer'\n                        },\n                        onClick: () => {\n                          this.handleChange(suggestion.description);\n                        },\n                        children: suggestion.description\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 23\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"search-info\",\n                children: /*#__PURE__*/_jsxDEV(DoctorSearch, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"searchbutton\",\n                children: \"Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["D:/React/Medatu/Medatu-website/src/components/WebSite/Pages/DynamicComponents/SearchBar/app/Search.js"],"names":["React","DoctorSearch","PlacesAutocomplete","geocodeByAddress","getLatLng","axios","Search","Component","constructor","props","setCurrentLocation","data","currentLocation","setState","address","address_components","long_name","getApproxAddress","lat","long","fetch","then","response","json","console","log","status","results","length","getNearbyPlaces","isChanged","latitude","longitude","state","URL","get","formatSuggestions","catch","error","message","formattedResults","map","k","description","name","id","place_id","types","formattedSuggestion","mainText","secondaryText","vicinity","initialSuggestions","handleChange","handleSelect","latLng","fetchSuggestions","componentDidMount","getGeoLocation","_this","document","addEventListener","e","target","className","includes","navigator","geolocation","getCurrentPosition","coords","render","getInputProps","suggestions","getSuggestionItemProps","loading","iterableSuggestion","padding","borderBottomLeftRadius","borderTopLeftRadius","borderColor","placeholder","suggestion","style","active","backgroundColor","cursor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;AAIA,OAAOC,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,MAAN,SAAqBN,KAAK,CAACO,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAoCnBC,kBApCmB,GAoCGC,IAAD,IAAU;AAC7B,WAAKC,eAAL,GAAuBD,IAAvB;AACA,WAAKE,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAEH,IAAI,CAACI,kBAAL,CAAwB,CAAxB,EAA2BC;AAArC,OAAd;AACD,KAvCkB;;AAAA,SAyCnBC,gBAzCmB,GAyCA,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACtC,aAAO,MAAMC,KAAK,CACf,4DAA2DF,GAAI,IAAGC,IAAK,yJADxD,CAAL,CAGVE,IAHU,CAGJC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAHT,EAIVF,IAJU,CAIL,MAAOV,IAAP,IAAgB;AACpBa,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bd,IAA9B;;AACA,YAAIA,IAAI,CAACe,MAAL,KAAgB,IAAhB,IAAwBf,IAAI,CAACgB,OAAL,CAAaC,MAAb,GAAsB,CAAlD,EAAqD;AACnD,eAAKlB,kBAAL,CAAwBC,IAAI,CAACgB,OAAL,CAAa,CAAb,CAAxB;AACD;;AAED,eAAO,IAAP;AAED,OAZU,CAAb;AAaD,KAvDkB;;AAAA,SAwDnBE,eAxDmB,GAwDD,YAAY;AAC5B,WAAKhB,QAAL,CAAc;AAACiB,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACA,YAAM;AAACC,QAAAA,QAAD;AAAWC,QAAAA;AAAX,UAAwB,KAAKC,KAAnC;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ,EAAsBC,SAAtB;AACA,YAAME,GAAG,GAAI,6GACXH,QACD,IAAGC,SAAU,kFAAiF,OAC7F,IAAK,8CAHP;AAIA3B,MAAAA,KAAK,CACF8B,GADH,CACOD,GADP,EAEGb,IAFH,CAEQC,QAAQ,IAAI;AAChBE,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACX,IAAT,CAAcgB,OAA1B;AACA,aAAKS,iBAAL,CAAuBd,QAAQ,CAACX,IAAT,CAAcgB,OAArC;AACD,OALH,EAMGU,KANH,CAMSC,KAAK,IAAI;AACdd,QAAAA,OAAO,CAACC,GAAR,CAAYa,KAAK,CAACC,OAAlB;AACD,OARH;AASD,KAzEkB;;AAAA,SA2EnBH,iBA3EmB,GA2EET,OAAD,IAAa;AAC/B,YAAMa,gBAAgB,GAAGb,OAAO,CAC/Bc,GADwB,CACpB,UAASC,CAAT,EAAY;AACf,eAAO;AACLC,UAAAA,WAAW,EAAED,CAAC,CAACE,IADV;AAELC,UAAAA,EAAE,EAAEH,CAAC,CAACI,QAFD;AAGLC,UAAAA,KAAK,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,SAA1B,CAHF;AAILC,UAAAA,mBAAmB,EAAE;AAACC,YAAAA,QAAQ,EAAEP,CAAC,CAACE,IAAb;AAAmBM,YAAAA,aAAa,EAAER,CAAC,CAACS;AAApC;AAJhB,SAAP;AAMD,OARwB,CAAzB;AASA3B,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCe,gBAAhC;AACA,WAAK3B,QAAL,CAAc;AAACuC,QAAAA,kBAAkB,EAAEZ;AAArB,OAAd;AACD,KAvFkB;;AAAA,SAyFnBa,YAzFmB,GAyFJvC,OAAO,IAAI;AACxB,WAAKD,QAAL,CAAc;AAACiB,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACA,WAAKjB,QAAL,CAAc;AAAEC,QAAAA;AAAF,OAAd;AACD,KA5FkB;;AAAA,SA8FnBwC,YA9FmB,GA8FJxC,OAAO,IAAI;AACxBX,MAAAA,gBAAgB,CAACW,OAAD,CAAhB,CACGO,IADH,CACQM,OAAO,IAAIvB,SAAS,CAACuB,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGN,IAFH,CAEQkC,MAAM,IAAI/B,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB8B,MAAvB,CAFlB,EAGGlB,KAHH,CAGSC,KAAK,IAAId,OAAO,CAACc,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHlB;AAID,KAnGkB;;AAAA,SAqGnBkB,gBArGmB,GAqGA,MAAM;AACvBhC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAKI,eAAL;AACD,KAxGkB;;AAEjB,SAAKI,KAAL,GAAa;AACXnB,MAAAA,OAAO,EAAE,EADE;AAEXF,MAAAA,eAAe,EAAE,IAFN;AAGXwC,MAAAA,kBAAkB,EAAE,EAHT;AAIXrB,MAAAA,QAAQ,EAAE,IAJC;AAKXC,MAAAA,SAAS,EAAE,IALA;AAMXF,MAAAA,SAAS,EAAE;AANA,KAAb;AAQD;;AAED2B,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,cAAL;;AACA,QAAIC,KAAK,GAAG,IAAZ;;AACAC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,UAAUC,CAAV,EAAa;AAC9CtC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBqC,CAAC,CAACC,MAAF,CAASC,SAA1B;;AACA,UAAG,CAACF,CAAC,CAACC,MAAF,CAASC,SAAT,CAAmBC,QAAnB,CAA4B,uBAA5B,CAAJ,EAAyD;AACtDN,QAAAA,KAAK,CAAC9C,QAAN,CAAe;AAACiB,UAAAA,SAAS,EAAE;AAAZ,SAAf;AACF;AACF,KALD,EAKG,KALH;AAMD;;AAED4B,EAAAA,cAAc,GAAG;AACf,QAAIQ,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgB;AACvD,cAAM;AAAEtC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA0BqC,MAAhC;AACA7C,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBM,QAAvB,EAAiCC,SAAjC;AACA,aAAKnB,QAAL,CAAc;AAACkB,UAAAA,QAAQ,EAAEA,QAAX;AAAqBC,UAAAA,SAAS,EAAEA;AAAhC,SAAd;AACA,aAAKpB,eAAL,GAAuB,KAAKK,gBAAL,CAAsBc,QAAtB,EAAgCC,SAAhC,CAAvB;AACD,OALD;AAMD,KAPD,MAOO;AACLR,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACD;AACF;;AAwED6C,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,kBAAD;AACE,MAAA,KAAK,EAAE,KAAKrC,KAAL,CAAWnB,OADpB;AAEE,MAAA,QAAQ,EAAE,KAAKuC,YAFjB;AAGE,MAAA,QAAQ,EAAE,KAAKC,YAHjB;AAAA,gBAKG,CAAC;AAAEiB,QAAAA,aAAF;AAAiBC,QAAAA,WAAjB;AAA8BC,QAAAA,sBAA9B;AAAsDC,QAAAA;AAAtD,OAAD,KAAqE;AACpElD,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B+C,WAA5B;AACA,cAAMG,kBAAkB,GAAG,KAAK1C,KAAL,CAAWH,SAAX,GAAuB0C,WAAvB,GAAqC,KAAKvC,KAAL,CAAWmB,kBAA3E;AACA,4BACE;AAAA,iCACA;AAAK,YAAA,SAAS,EAAC,YAAf;AAA4B,YAAA,KAAK,EAAE;AAACwB,cAAAA,OAAO,EAAE;AAAV,aAAnC;AAAA,mCAEA;AAAM,cAAA,SAAS,EAAC,aAAhB;AAA8B,cAAA,MAAM,EAAC,2BAArC;AAAA,sCAEA;AAAK,gBAAA,SAAS,EAAC,iBAAf;AAAA,wCACA;AAAQ,kBAAA,KAAK,EAAE;AAACC,oBAAAA,sBAAsB,EAAC,EAAxB;AAA2BC,oBAAAA,mBAAmB,EAAC,EAA/C;AAAkDC,oBAAAA,WAAW,EAAE;AAA/D,mBAAf;AAAA,qBAAyGR,aAAa,CAAC;AAACS,oBAAAA,WAAW,EAAE,mBAAd;AAAmChB,oBAAAA,SAAS,EAAE;AAA9C,mBAAD,CAAtH;AAAgM,kBAAA,IAAI,EAAC,MAArM;AAA4M,kBAAA,EAAE,EAAC,UAA/M;AAA0N,kBAAA,WAAW,EAAC,iBAAtO;AAAwP,kBAAA,OAAO,EAAE,KAAKR;AAAtQ;AAAA;AAAA;AAAA;AAAA,wBADA,eAEE;AAAK,kBAAA,SAAS,EAAC,iCAAf;AAAA,6BACKkB,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADhB,EAEKC,kBAAkB,CAAClC,GAAnB,CAAuBwC,UAAU,IAAI;AAElC,0BAAMC,KAAK,GAAGD,UAAU,CAACE,MAAX,GACZ;AAAEC,sBAAAA,eAAe,EAAE,qBAAnB;AAAyCR,sBAAAA,OAAO,EAAE;AAAlD,qBADY,GAEZ;AAAEQ,sBAAAA,eAAe,EAAE,SAAnB;AAA6BR,sBAAAA,OAAO,EAAE;AAAtC,qBAFF;AAGA,wCACA;AACA,sBAAA,SAAS,EAAC,mBADV;AAAA,yBAEQH,sBAAsB,CAACQ,UAAD,EAAa;AACvCC,wBAAAA;AADuC,uBAAb,CAF9B;AAAA,6CAME;AAAM,wBAAA,KAAK,EAAE;AAACG,0BAAAA,MAAM,EAAE;AAAT,yBAAb;AAAkC,wBAAA,OAAO,EAAE,MAAM;AAAC,+BAAKhC,YAAL,CAAkB4B,UAAU,CAACtC,WAA7B;AAA0C,yBAA5F;AAAA,kCAA+FsC,UAAU,CAACtC;AAA1G;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,4BADA;AAUD,mBAfF,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFA,eAyBA;AAAK,gBAAA,SAAS,EAAC,aAAf;AAAA,uCACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBAzBA,eA4BF;AAAQ,gBAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADF;AAqCD;AA7CH;AAAA;AAAA;AAAA;AAAA,YADF;AAoDD;;AAhKkC;;AAiKnC,eAAerC,MAAf","sourcesContent":["import React from 'react'\r\nimport './Placesapi.css'\r\nimport DoctorSearch from './DoctorSearch'\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport axios from \"axios\";\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      address: '',\r\n      currentLocation: null,\r\n      initialSuggestions: [],\r\n      latitude: null,\r\n      longitude: null,\r\n      isChanged: false,\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.getGeoLocation()\r\n    let _this = this\r\n    document.addEventListener('click', function (e) {\r\n      console.log('e', e.target.className)\r\n      if(!e.target.className.includes('location-search-input')){\r\n         _this.setState({isChanged: true})\r\n      }\r\n    }, false);\r\n  }\r\n\r\n  getGeoLocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n        const { latitude, longitude } = coords\r\n        console.log('latlong', latitude, longitude)\r\n        this.setState({latitude: latitude, longitude: longitude})\r\n        this.currentLocation = this.getApproxAddress(latitude, longitude)\r\n      })\r\n    } else {\r\n      console.log(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }\r\n\r\n  setCurrentLocation = (data) => {\r\n    this.currentLocation = data\r\n    this.setState({address: data.address_components[0].long_name})\r\n  }\r\n\r\n  getApproxAddress = async (lat, long) => {\r\n    return await fetch(\r\n      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&result_type=street_address|political|locality|sublocality|neighborhood|premise|subpremise&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s&libraries=places`\r\n    )\r\n      .then((response) => response.json())\r\n      .then(async (data) => {\r\n        console.log('Map Response: ', data)\r\n        if (data.status === 'OK' && data.results.length > 0) {\r\n          this.setCurrentLocation(data.results[0])\r\n        }\r\n   \r\n        return null\r\n        \r\n      })\r\n  }\r\n  getNearbyPlaces = async () => {\r\n    this.setState({isChanged: false})\r\n    const {latitude, longitude} = this.state\r\n    console.log(latitude, longitude)\r\n    const URL = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${\r\n      latitude\r\n    },${longitude}&type=bus_station|post_office|tourist_attraction|train_station|hospital&radius=${5000 *\r\n      1000}&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s`;\r\n    axios\r\n      .get(URL)\r\n      .then(response => {\r\n        console.log(response.data.results);\r\n        this.formatSuggestions(response.data.results)\r\n      })\r\n      .catch(error => {\r\n        console.log(error.message);\r\n      });\r\n  }\r\n\r\n  formatSuggestions = (results) => {\r\n    const formattedResults = results \r\n    .map(function(k) {\r\n      return {\r\n        description: k.name,\r\n        id: k.place_id,\r\n        types: [\"locality\", \"political\", \"geocode\"],\r\n        formattedSuggestion: {mainText: k.name, secondaryText: k.vicinity}\r\n      }\r\n    })\r\n    console.log('formattedResults', formattedResults)\r\n    this.setState({initialSuggestions: formattedResults})\r\n  }\r\n\r\n  handleChange = address => {\r\n    this.setState({isChanged: true})\r\n    this.setState({ address });\r\n  };\r\n \r\n  handleSelect = address => {\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => console.log('Success', latLng))\r\n      .catch(error => console.error('Error', error));\r\n  };\r\n\r\n  fetchSuggestions = () => {\r\n    console.log('fetching suggestions')\r\n    this.getNearbyPlaces()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PlacesAutocomplete\r\n        value={this.state.address}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\r\n          console.log('suggesstions', suggestions)\r\n          const iterableSuggestion = this.state.isChanged ? suggestions : this.state.initialSuggestions\r\n          return(\r\n            <div>\r\n            <div className=\"search-box\" style={{padding: \"0\"}}>\r\n           \r\n            <form className=\"form-design\" action=\"assets/webpages/list.html\">\r\n\r\n            <div className='search-location'>\r\n            <input  style={{borderBottomLeftRadius:20,borderTopLeftRadius:20,borderColor: \"#a49d9d !important\"}} {...getInputProps({placeholder: 'Search Places ...', className: 'location-search-input',})}type=\"text\" id=\"location\" placeholder=\"Search Location\" onFocus={this.fetchSuggestions}/>                \r\n              <div className=\"autocomplete-dropdown-container\">\r\n                  {loading && <div>Loading...</div>}\r\n                  {iterableSuggestion.map(suggestion => {\r\n                      \r\n                      const style = suggestion.active\r\n                      ? { backgroundColor: 'rgba(238, 238, 232)',padding: \".5rem\" }\r\n                      : { backgroundColor: '#fdfdfd',padding: \".5rem\" };\r\n                      return (\r\n                      <div \r\n                      className='input-suggestionz'\r\n                          {...getSuggestionItemProps(suggestion, {\r\n                          style,\r\n                          })}\r\n                      >\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {this.handleChange(suggestion.description)}}>{suggestion.description}</span>\r\n                        </div>\r\n                        );\r\n                    })}\r\n                  </div>\r\n            </div>\r\n\r\n            <div className=\"search-info\">\r\n              <DoctorSearch/>\r\n            </div>\r\n          <button className=\"searchbutton\">Search</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n          )\r\n        }\r\n         \r\n        }\r\n      </PlacesAutocomplete>\r\n    );\r\n   \r\n  }\r\n} export default Search;"]},"metadata":{},"sourceType":"module"}